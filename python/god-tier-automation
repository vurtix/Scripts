///

from bs4 import BeautifulSoup
import requests
import os

# Scrape job listings from Indeed
indeed_url = 'https://www.indeed.com/jobs?q=cybersecurity+entry+level+remote&l='
response = requests.get(indeed_url)
soup = BeautifulSoup(response.text, 'html.parser')
job_divs = soup.find_all('div', {'class': 'jobsearch-SerpJobCard'})

jobs = []
for div in job_divs:
    title = div.find('a', {'class': 'jobtitle'}).text.strip()
    company = div.find('span', {'class': 'company'}).text.strip()
    link = div.find('a', {'class': 'jobtitle'})['href']
    if 'entry level' in title.lower() and 'mid level' not in title.lower() and 'senior' not in title.lower():
        jobs.append((title, company, link))

# Scrape job listings from ZipRecruiter
ziprecruiter_url = 'https://www.ziprecruiter.com/candidate/search?search=cybersecurity+entry+level+remote&location='
response = requests.get(ziprecruiter_url)
soup = BeautifulSoup(response.text, 'html.parser')
job_divs = soup.find_all('div', {'class': 'job_content'})

for div in job_divs:
    title = div.find('a', {'class': 'job_link'}).text.strip()
    company = div.find('span', {'class': 'job_org_name'}).text.strip()
    link = div.find('a', {'class': 'job_link'})['href']
       if 'entry level' in title.lower() and 'mid level' not in title.lower() and 'senior' not in title.lower():
        jobs.append((title, company, link))

# Input personal information
your_name = input("Enter your name: ")
email = input("Enter your email address: ")
phone = input("Enter your phone number: ")
address = input("Enter your address: ")
resume_path = input("Enter the path to your resume: ")
cover_letter_path = input("Enter the path to your cover letter: ")

# Check for scam job listings
scam_keywords = ['money transfer', 'wire transfer', 'western union']
for job in jobs:
    title, company, link = job
    is_scam = False
    for keyword in scam_keywords:
        if keyword in title.lower() or keyword in company.lower():
            is_scam = True
            break
    if is_scam:
        print(f'{title} at {company} appears to be a scam and will not be applied to.')
    else:
        # Check the company on scamadvisor and similar websites
        scamadvisor_url = f"https://www.scamadviser.com/check-website/{company}"
        response = requests.get(scamadvisor_url)
        soup = BeautifulSoup(response.text, 'html.parser')
        scam_report = soup.find("div", {"class": "scam-report"})
        if scam_report and "high risk" in scam_report.text.lower():
            print(f'{title} at {company} appears to be a scam and will not be applied to.')
        else:
            session = requests.Session()
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0;Win64) AppleWebkit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                "Accept-Language": "en-US,en;q=0.9",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive",
                "Accept": "*/*",
            }

            # Fetch the application page
            response = session.get(link, headers=headers)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Extract the form data
            form_data = {
                'name': your_name,
                'email': email,
                'phone': phone,
                'address': address
            }

            #Check if the application process is handled by Indeed or by the company directly
            if 'indeedapply' in response.url:
                # Extract the form data and apply through Indeed's application process
                for input_tag in soup.find_all('input'):
                    if 'name' in input_tag.attrs:
                        form_data[input_tag['name']] = input_tag.get('value','')
                with open(resume_path, 'rb') as f:
                    file_data = f.read()
                files = {'file': ('resume.pdf', file_data, 'application/pdf')}
                if cover_letter_path:
                    with open(cover_letter_path, 'rb') as f:
                        cover_letter_data = f.read()
                    files['cover_letter'] = ('cover_letter.pdf', cover_letter_data, 'application/pdf')
                apply_url = 'https://apply.indeed.com/indeedapply/apply'
                response = session.post(apply_url, data=form_data, headers=headers, files=files)
                if response.status_code == 200:
                    print(f'Successfully applied to {title} at {company} through Indeed')
                else:
                    print(f'Failed to apply to {title} at {company}')
            else:
                # Apply through the company's application process
                for input_tag in soup.find_all('input'):
                    if 'name' in input_tag.attrs:
                        form_data[input_tag['name']] = input_tag.get('value','')
                response = session.post(link, data=form_data, headers=headers)
                if response.status_code == 200:
                    print(f'Successfully applied to {title} at {company} through the company website')
                else:
                    print(f'Failed to apply to {title} at {company}')

\\\
